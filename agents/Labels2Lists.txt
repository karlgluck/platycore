Any line that doesn't start with a space is ignored, so we can write whatever we like up here describing how this works!

==================================================================
Common Initialization

      TITLE  "Labels to Lists"
    RESERVE  7

--- EN ---

   SELECT  "C2"
     NAME  "EN"
   TOGGLE
  READONLY "OFF"
   SELECT  "D2"
     TEXT  "EN"

--- ON ---

   SELECT  "C3"
     NAME  "ON"
   TOGGLE  "TRUE"
 READONLY  "ON"
   SELECT  "D3"
     TEXT  "ON"

--- GO ---

   SELECT  "C4"
     NAME  "GO"
   TOGGLE
 READONLY  "OFF"
   SELECT  "D4"
     TEXT  "GO"

--- WAKE ---

   SELECT  "H2:L2"
     NAME  "WAKE"
    FIELD
 READONLY  "OFF"
     EVAL  "agent.WriteField('WAKE', Lang.GetTimestampNowP() + 15000)"
     LOAD  "WAKE", "OLD_AGENT"
   SELECT  "F2:G2"
     TEXT  "WAKE"
   SELECT  "F3:L3"
  FORMULA  "=(H2-(60*2+4)*1000)/1000/60/60/24+25568.6681"
   FORMAT  "DATETIME"

--- LOCK ---

   SELECT  "H5:L5"
     NAME  "LOCK"
    FIELD
 READONLY  "OFF"
     EVAL  "agent.WriteField('LOCK', Lang.GetTimestampNowP())"
   SELECT  "F5:G5"
     TEXT  "LOCK"
   SELECT  "F6:L6"
  FORMULA  "=(H5-(60*2+4)*1000)/1000/60/60/24+25568.6681"
   FORMAT  "DATETIME"

==================================================================
Agent-specific

--- SHEET ---

   SELECT "N2:R2"
     TEXT "Sheet:"
   HALIGN "right"
   SELECT "S2:AH2"
     NAME "SHEET"
    FIELD
 READONLY "OFF"
     LOAD "SHEET", "OLD_AGENT"

--- Processed ---
   SELECT "C6:D6"
     TEXT 0
     NAME "PROCESSED"
    FIELD
 READONLY "ON"
     LOAD "PROCESSED", "OLD_AGENT"
   HALIGN "center"

--- Input Gmail Label ---

   SELECT "N4:R4"
     TEXT "Input label:"
   HALIGN "right"
   SELECT "S4:AC4"
     TEXT "<Input Label>"
     NAME "INPUT"
    FIELD
 READONLY "OFF"
     LOAD "INPUT", "OLD_AGENT"
 VALIDATE "Enter the name of a label from your Gmail account"
        + "IS_GMAIL_LABEL"


==================================================================
Manual Actions

--- [Reinstall] ---

   SELECT "AS6:AV6"
     TEXT "[Reinstall]"
    STYLE "BUTTON"
     NOTE "---"
------------------------
      ABORT_UNLESS_INTERACTIVE
      ALIAS "OLD_AGENT"
      EXPORT
      UNINSTALL
      NEW_AGENT "NEW_AGENT"
The stack is a place for storing temporary values so that
they can be passed as arguments to functions.
      SELECT "STACK"
With the stack selected, this will read a value from
the IMPORT-ed agent and push it to the stack.
      LOAD "REINSTALL_URL", "OLD_AGENT"
"null" means read the value for the parameter from the stack
      INSTALL null
------------------------
   SELECT "AJ6:AR6"
     NAME "REINSTALL_URL"
    FIELD
    VALUE "LAST_INSTALL_URL"

--- [Make Sheet] ---

   SELECT "AJ2:AN2"
     TEXT "[Make Sheet]"
    STYLE "BUTTON"
     CODE "---"
------------------------
var sheet = SpreadsheetApp.create("üè≠ Labels2Lists", 1, 1).getSheets()[0];
var headers = GAS.MergeSheetHeaders(sheet, ['input_label', 'object_from_gmail_message_function', 'sheet_url']);
var stringOfGetObjectFromGmailMessage = "// https://developers.google.com/apps-script/reference/gmail/gmail-message\nfunction (gmailMessage) {\n  var subject = gmailMessage.getSubject().trim();\n  var subjectUrls = Lang.FindUrlsInString(subject);\n  var body = gmailMessage.getPlainBody().trim();\n  var bodyUrls = Lang.FindUrlsInString(body);\n  return {\n    'item': subject.trim(),\n    'url': subjectUrls.concat(bodyUrls).concat([''])[0],\n    'details': body,\n    'email': GAS.GetUrlFromGmailMessage(gmailMessage)\n  };\n}";
GAS.AddRowsToJournalingSheet(
      [['<Gmail Label>', stringOfGetObjectFromGmailMessage, '<sheet url>']],
      sheet);
agent.WriteField('SHEET', GAS.GetUrlFromSheet(sheet));
agent.ExecuteRoutineUsingNoteName('REFRESH_LABELS');
------------------------


   SELECT "AP2:AV2"
     TEXT "[Refresh Labels]"
    STYLE "BUTTON"
     CODE "---"
------------------------
var sheet = GAS.GetSheetFromUrl(agent.ReadField('SHEET'));
var headers = GAS.MergeSheetHeaders(sheet, ['input_label']);
var ciInputLabelColumn = 1 + headers.indexOf('input_label');
var labels = GmailApp.getUserLabels().map(function (eLabel) { return eLabel.getName() }).sort();
var dataValidation = SpreadsheetApp.newDataValidation().requireValueInList(labels).setHelpText("Gmail Label").build();
var irFirstRow = sheet.getFrozenRows() + 1;
var nRowCount = sheet.getLastRow() - irFirstRow + 1;
sheet.getRange(irFirstRow, ciInputLabelColumn,  nRowCount, 1).setDataValidation(dataValidation);
agent.Log('Applied ' + labels.length + ' label(s)');
------------------------


==================================================================
Scripts

--- UPDATE ---

   SELECT  "A1"
     CODE  "---"
------------------------
var en = agent.ReadToggle('EN');
if (!en)
   {
   agent.Log('[!EN]: Agent is disabled (to enable, set EN=TRUE)');
   }
var sheet = GAS.GetSheetFromUrl(agent.ReadField('SHEET'));
var records = GAS.GetObjectsFromSheetP(sheet);
records.forEach(function (eRecord)
   {
   eRecord.GetObjectFromGmailMessage = eval(eRecord.object_from_gmail_message_function);
   eRecord.outputSheet = GAS.GetSheetFromUrl(eRecord.sheet_url);
   });
var inputLabel = GmailApp.getUserLabelByName(agent.ReadField('INPUT_LABEL'));
var recordsFromLabelName = Lang.MakeObjectArrayFromKeyDictionaryUsingObjectsP(records, 'input_label');
var threads = inputLabel.getThreads();
var outputs = [];
threads.forEach(function (eThread)
   {
   var processableLabels = eThread.getLabels()
         .map(function (eLabel) { return eLabel.getName() })
         .filter(function (eLabelName) { return recordsFromLabelName.hasOwnProperty(eLabelName) });
   if (1 > processableLabels.length)
      {
      if (!en) agent.Log('No labels matched thread with subject "' + eThread.getFirstMessageSubject() + '"');
      return;
      }
   processableLabels.forEach(function (eLabelName)
      {
      var eRecord = recordsFromLabelName[eLabelName][0];
      outputs.push({record: eRecord, label_name:eLabelName, object: eRecord.GetObjectFromGmailMessage(eThread.getMessages()[0])});
      });
   
   if (en)
      {
      eThread.removeLabel(inputLabel);
      }
   });
var outputsFromLabelName = Lang.MakeObjectArrayFromKeyDictionaryUsingObjectsP(outputs, 'label_name');
Object.keys(outputsFromLabelName).forEach(function (eLabelName)
   {
   var eOutputs = outputsFromLabelName[eLabelName];
   var outputSheet = eOutputs[0].record.outputSheet;
   var objects = eOutputs.map(function (e) { return e.object });
   var headers = GAS.MergeSheetHeaders(outputSheet, Object.keys(objects[0]));
   var table = Lang.GetTableFromObjectsP(objects, headers);
   var rows = Lang.GetRowsFromTableP(table);
   if (en)
      {
      GAS.AddRowsToJournalingSheet(rows.reverse(), outputSheet);
      GAS.TrimSheetRows(outputSheet);
      agent.Log('Added ' + rows.length + ' email(s) from the label "' + eLabelName + '"');
      }
   else
      {
      agent.Log('[!EN]: Would have processed ' + rows.length + ' email(s) from the label "' + eLabelName + '"');
      }
   });
if (0 < threads.length)
   {
   agent.Log('There were ' + threads.length + ' email(s)');
   }
if (en)
   {
   agent.WriteField('PROCESSED', Lang.MakeIntUsingAnyP(agent.ReadField('PROCESSED')) + threads.length);
   }
else
   {
   agent.Snooze(15 * 60 * 1000);
   }
------------------------
      TURN_OFF
