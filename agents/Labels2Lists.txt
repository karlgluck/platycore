Any line that doesn't start with a space is ignored, so we can write whatever we like up here describing how this works!

==================================================================
Common Initialization

     NAME  "Labels -> Lists"
   FREEZE  3
   REINSTALL "agent.Log(previousInstallMemory)"

--- ON ---

   SELECT  "A2"
   TOGGLE  "ON"
        +  "TRUE"
        +  "READONLY"
   SELECT  "B2"
     TEXT  "ON"
   SELECT  "A2:B2"
    PANEL  "0"

--- GO ---

   SELECT  "A1"
   TOGGLE  "GO"
   SELECT  "B1"
     TEXT  "GO"
   SELECT  "A1:B1"
    PANEL  "1"

--- EN ---

   SELECT  "C1"
   TOGGLE  "EN"
   SELECT  "D1"
     TEXT  "EN"
   SELECT  "C1:D1"
    PANEL  "2"

--- WAKE ---

   SELECT  "E1:I1"
    FIELD  "WAKE"
     EVAL  "agent.WriteField('WAKE', Lang.GetTimestampNow() + 15000)"
   SELECT  "J1:K1"
     TEXT  "WAKE"
   SELECT  "E2:K2"
  FORMULA  "=(E1-(60*2+4)*1000)/1000/60/60/24+25568.6681"
   FORMAT  "DATETIME"
   SELECT  "E1:K2"
    PANEL  "3"

--- LOCK ---

   SELECT  "L1:P1"
    FIELD  "LOCK"
     EVAL  "agent.WriteField('LOCK', Lang.GetTimestampNow())"
   SELECT  "Q1:R1"
     TEXT  "LOCK"
   SELECT  "L2:R2"
  FORMULA  "=(L1-(60*2+4)*1000)/1000/60/60/24+25568.6681"
   FORMAT  "DATETIME"
   SELECT  "L1:R2"
    PANEL  "4"

==================================================================
Agent-specific


--- SHEET ---

   SELECT "S1:AU1"
    PANEL "6"
   SELECT "S1:U1"
     TEXT "Sheet:"
   SELECT "V1:AU1"
    FIELD "SHEET"
        + "UPGRADE"
    PANEL "5"

--- Processed ---
   SELECT "AV1:AW2"
     TEXT 0
    FIELD "PROCESSED"
        + "READONLY"
        + "UPGRADE"
   HALIGN "center"
   VALIGN "middle"
       FG "#FF0000"
       BG "#440000"
    PANEL "7"


--- Input Gmail Label ---

   SELECT "AE2:AU2"
    PANEL "6"
   SELECT "AE2:AI2"
     TEXT "Input label:"
   SELECT "AJ2:AU2"
     TEXT "<Input Label>"
    FIELD "INPUT_LABEL"
        + "UPGRADE"
 VALIDATE "Enter the name of a label from your Gmail account"
        + "IS_GMAIL_LABEL"
    PANEL "5"


==================================================================
Manual Actions

   SELECT "S2:W2"
     TEXT "[Make Sheet]"
       FG "#000"
       BG "#ffff00"
   HALIGN "center"
     NOTE "MAKE_SHEET"
        + "---"
------------------------
var sheet = SpreadsheetApp.create("üè≠ Labels2Lists", 1, 1).getSheets()[0];
var headers = GAS.MergeSheetHeaders(sheet, ['input_label', 'object_from_gmail_message_function', 'sheet_url']);
var stringOfGetObjectFromGmailMessage = "// https://developers.google.com/apps-script/reference/gmail/gmail-message\nfunction (gmailMessage) {\n  var subject = gmailMessage.getSubject().trim();\n  var subjectUrls = Lang.GetUrlsFromString(subject);\n  var body = gmailMessage.getPlainBody().trim();\n  var bodyUrls = Lang.GetUrlsFromString(body);\n  return {\n    'item': subject.trim(),\n    'url': subjectUrls.concat(bodyUrls).concat([''])[0],\n    'details': body,\n    'email': GAS.GetUrlFromGmailMessage(gmailMessage)\n  };\n}";
GAS.AddRowsToJournalingSheet(
      [['<Gmail Label>', stringOfGetObjectFromGmailMessage, '<sheet url>']],
      sheet);
agent.WriteField('SHEET', GAS.GetUrlFromSheet(sheet));
agent.EvalNoteByName('REFRESH_LABELS');
------------------------


   SELECT "X2:AD2"
     TEXT "[Refresh Labels]"
       FG "#000"
       BG "#ffff00"
   HALIGN "center"
     NOTE "REFRESH_LABELS"
        + "---"
------------------------
var sheet = GAS.GetSheetFromUrl(agent.ReadField('SHEET'));
var headers = GAS.MergeSheetHeaders(sheet, ['input_label']);
var ciInputLabelColumn = 1 + headers.indexOf('input_label');
var labels = GmailApp.getUserLabels().map(function (eLabel) { return eLabel.getName() }).sort();
var dataValidation = SpreadsheetApp.newDataValidation().requireValueInList(labels).setHelpText("Gmail Label").build();
var irFirstRow = sheet.getFrozenRows() + 1;
var nRowCount = sheet.getLastRow() - irFirstRow + 1;
sheet.getRange(irFirstRow, ciInputLabelColumn,  nRowCount, 1).setDataValidation(dataValidation);
agent.Log('Applied ' + labels.length + ' label(s)');
------------------------



==================================================================
Scripts

--- MAIN ---
This is tricky. I use the same block of cells for the field named SCRIPT, which holds the value MAIN, which refers to the note so-named (MAIN), which happens to also be placed on this same block of cells. Normally, the SCRIPT field would be separate and would hold a reference to one of several other NOTEs.

   SELECT  "C2:D2"
    FIELD  "SCRIPT"
     TEXT  "MAIN"
   HALIGN  "center"
    PANEL  "5"
Below is the only exception to the rule that "everything that doesn't start with a space is ignored".
When a line is entirely dashes and there is a matching line that is entirely dashes, and the line preceding the earlier line ends with a quoted set of dashes, then the quoted dashes are replaced with the JSON-encoded text content of the lines between the dashed lines, and all other text is removed.
     NOTE  "MAIN"
        +  "---"
------------------------
var en = Lang.boolCast(agent.ReadToggle('EN'));
if (!en)
   {
   agent.Log('[!EN]: Agent is disabled (to enable, set EN=TRUE)');
   }
var sheet = GAS.GetSheetFromUrl(agent.ReadField('SHEET'));
var records = GAS.GetObjectsFromSheetP(sheet);
records.forEach(function (eRecord)
   {
   eRecord.GetObjectFromGmailMessage = eval(eRecord.object_from_gmail_message_function);
   eRecord.outputSheet = GAS.GetSheetFromUrl(eRecord.sheet_url);
   });
var inputLabel = GmailApp.getUserLabelByName(agent.ReadField('INPUT_LABEL'));
var recordsFromLabelName = Lang.GetObjectArrayFromKeyDictionaryFromObjectsP(records, 'input_label');
var threads = inputLabel.getThreads();
var outputs = [];
threads.forEach(function (eThread)
   {
   var processableLabels = eThread.getLabels()
         .map(function (eLabel) { return eLabel.getName() })
         .filter(function (eLabelName) { return recordsFromLabelName.hasOwnProperty(eLabelName) });
   if (1 > processableLabels.length)
      {
      if (!en) agent.Log('No labels matched thread with subject "' + eThread.getFirstMessageSubject() + '"');
      return;
      }
   processableLabels.forEach(function (eLabelName)
      {
      var eRecord = recordsFromLabelName[eLabelName][0];
      outputs.push({record: eRecord, label_name:eLabelName, object: eRecord.GetObjectFromGmailMessage(eThread.getMessages()[0])});
      });
   
   if (en)
      {
      eThread.removeLabel(inputLabel);
      }
   });
var outputsFromLabelName = Lang.GetObjectArrayFromKeyDictionaryFromObjectsP(outputs, 'label_name');
Object.keys(outputsFromLabelName).forEach(function (eLabelName)
   {
   var eOutputs = outputsFromLabelName[eLabelName];
   var outputSheet = eOutputs[0].record.outputSheet;
   var objects = eOutputs.map(function (e) { return e.object });
   var headers = GAS.MergeSheetHeaders(outputSheet, Object.keys(objects[0]));
   var table = Lang.GetTableFromObjectsP(objects, headers);
   var rows = Lang.GetRowsFromTableP(table);
   if (en)
      {
      GAS.AddRowsToJournalingSheet(rows.reverse(), outputSheet);
      GAS.TrimSheetRows(outputSheet);
      agent.Log('Added ' + rows.length + ' email(s) from the label "' + eLabelName + '"');
      }
   else
      {
      agent.Log('[!EN]: Would have processed ' + rows.length + ' email(s) from the label "' + eLabelName + '"');
      }
   });
agent.WriteField('PROCESSED', Lang.intCast(agent.ReadField('PROCESSED')) + threads.length);
if (0 === threads.length)
   {
   agent.Snooze(15 * 60 * 1000);
   }
else
   {
   agent.Log('Processed ' + threads.length + ' emails');
   }
------------------------
      OFF
